name: build
on:
  push:
  workflow_dispatch:

jobs:
  cpp:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: install dependencies
        run: |
          sudo apt-get install --no-install-recommends clang-format-11 libboost-dev libmbedtls-dev ninja-build
          python -m pip install --upgrade pip
          pip install meson
      - uses: actions/checkout@v2
      - name: check meson.build lists and code style
        run: |
          mk/update-list.sh
          mk/format-code.sh
          git diff --exit-code
      - name: build CLI programs
        run: |
          meson build -Dbuildtype=debug -Dwerror=true
          ninja -C build
  arduino:
    runs-on: ubuntu-20.04
    steps:
      - uses: arduino/setup-arduino-cli@v1.1.1
      - name: install Arduino cores and libraries
        run: |
          arduino-cli version
          arduino-cli core update-index --additional-urls $ARDUINO_CORE_URI
          arduino-cli core install esp32:esp32 --additional-urls $ARDUINO_CORE_URI
        env:
          ARDUINO_CORE_URI: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install esptool
      - uses: actions/checkout@v2
      - name: install libraries
        run: |
          mkdir -p $HOME/Arduino/libraries
          cd $HOME/Arduino/libraries
          ln -s $GITHUB_WORKSPACE ndn-onboarding
          mkdir NDNph esp8266ndn
          curl -fsLS https://github.com/yoursunny/NDNph/archive/${NDNPH_VERSION}.tar.gz | tar -C NDNph -xz --strip-components=1
          curl -fsLS https://github.com/yoursunny/esp8266ndn/archive/${ESP8266NDN_VERSION}.tar.gz | tar -C esp8266ndn -xz --strip-components=1
        env:
          NDNPH_VERSION: ef941c24007d2edb8853bd8a039f61438e4c34d3
          ESP8266NDN_VERSION: 2b07d6dee8bb6ea4ae9425808d39b40b42d63f99
      - name: compile Arduino sketches
        run: |
          for F in $(find ./examples -name 'sample.*'); do
            [[ -f "${F/sample./}" ]] || cp "${F}" "${F/sample.//}"
          done
          for D in $(find ./examples -name '*.ino' -printf '%h\n'); do
            printf "\n---- \033[1;35mBuild $D\033[0m ----\n"
            arduino-cli compile -b esp32:esp32:esp32 --warnings more \
              --build-property 'build.partitions=noota_ffat' \
              --build-property 'upload.maximum_size=2097152' \
              $D
          done
  node:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        subdir:
          - ./extras/ca
          - ./extras/exp
    defaults:
      run:
        working-directory: ${{ matrix.subdir }}
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 17
      - uses: actions/checkout@v2
      - run: corepack pnpm install
      - name: check code style
        run: |
          corepack pnpm lint
          git diff --exit-code
      - run: corepack pnpm typecheck
  go:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        subdir:
          - ./extras/pcapparse
    defaults:
      run:
        working-directory: ${{ matrix.subdir }}
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - uses: actions/checkout@v2
      - run: go install ./cmd/ndnob-pcapparse
